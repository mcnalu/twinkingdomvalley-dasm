TKV notes

=============================
Main loop step through.
Break is at $1451. Started game from scratch.
Selected option 5
Output:
You are on a road.
North you can see a wooden cabin.
North east is a forest path.
East you can see a road.
West you can see a road.
South (This line is incomplete. Text still being displayed to screen?)
BREAK at $1451

=======================
TKV subroutines

These are listed in order they are called after $1400 entry.

L149C=NEWLINE
Sets $006F and $0082 to zero then issues a newline.

L1FC0=PRESSTAB
Prints the Press tab... message
Setting &7C01 to #&98 will hide it and 0 will show it.

L180D=INITOPTION
Prints Select then issues the option command.
Plus some other stuff?

L2517=?
Performs various JSRs. Calls $3B20 which seems to just wait for 5.12s.

L20EA=?
Performs various JSRs

L1451 MAIN GAME LOOP based on contents of $2AD0

L0C00=?
Draws the magenta dashes at the end/start of a turn.
Performs various JSRs. Called several times.

L24D4=?
Performs various JSRs

L1DDA=?
Performs various JSRs

=====================
Input is collected by subroutine $229F

Input is read at the OSWORD just after L2301.

Loop for reading input chars starts at L230D

* commands JMP to L0BCA

JSR $229F is called from $0C00

$3600 onwards contain recognised commands. Last letter of each is marked as
it is stored with &80 added to its ASCII value. Code from $233B searches
through them to try and match input.

=====================

String locations:

$254C Mode 7 Green Press tab...

=====================

Storage locations:

$1 contains the 1-6 draw/description option. Codes stored in $17CA-F see $1846 and below
$2 is players thirst, see $0FC2 and after for getting dry type messages
$14 is set to player location ?$89 at $1004 via call to $0F03 from $A42A0 but is it different at times?
$15 Determines how $0C00 runs, see $0C00 structure notes
$16 is used to store index of outer loop character in $0C00 routines
$18 is used to store $2880 entry for outer loop character class
$19 is used to store $28A0 entry for outer loop character class
$1C is set to old value of $14 (player location) just before $14 is set to $89, see $14 above
$21 Set to $80 if princess recognises you cos you have amulet or  $40 if not, see $1192 and after 
$26 Set to $80 in $22E1 block. If $26<0 then signal caps needed for new sentence start.
$27 Set to $2 near start at $1400. Once negative staff drops 80% of the time it's used.
$62 is where damage is stored, see $1C02
$6F appears to be for setting colour, see $3B51
$82 appears to count number of characters printed out - in a turn?
$83 After input in $229F routine this will contain index of first matched command
$89 is the player's current location, eg 00 is cabin. Used in routine $20BD
$8A is set to value of first byte in address $89 points to. Set in routine $20BD. Might have a use elsewhere though as it gets saved onto stack prior to $2089 call in just after $0C37.
$8B sees to count down at a rate of once every couple of seconds, 2.56s?
$2A is the text print out speed as set by *TEXT

$0380 - Low byte of word starts in $0500 look up table
$0400 - High byte of word starts in $0500 look up table
For example, if byte $98 is given to routine $14CE then:
Location $380+98=418 contains low byte 7C
Location $400+98=498 vontains high byte 05
So $057C contains first letter of word SELECT

$0500-$07FF - these are responses that are printed out using 14CE

NOTE: $07D3 should point to word WORTHY in message in small cave about
the treasure chest but the O and R bytes are set to FF. Error in reading
disk?

$0900 - start of lookup tables - perhaps LB of addresses? See 0B12
$0A00 - start of lookup tables - perhaps HB of addresses? See 0B12

$0A00-  ; used as buffer OSWORD A=0
$0AC0-4 ; used for param block for OSWORD A=0 for reading input
        ; then later used to store upper case converted char codes of that input

$0A7F+X ; Dunno used at $1539
        
$1283   ; Lookup table used in $0F14
$1289   ; Lookup table used in $0F14
        
$17CA-F ; Codes for options 1-6 for draw/desc: 60 20 C0 80 40 00
        
$L1EB1,X ; This a table of low bytes for each command index
$L1ECF,X ; and these are high bytes. See $14A7

$1F00+1

$2580 ; Table of object codes. Eg $2580 is $14 for holdall, used for $2600 lookup
$25C0 ; Table of object locations. Used at $21AC and JSR $3B8D and many other places.
      ; Not all locations correspond to a index in the location table
      ; $C8 means the player has it
      ; Does $C8+X mean NPC X has it for X>0?
      ; $FF means it is in holdall
      ; $C7 is the initial location of the silver key
      ; $C7 means the object doesn't exist eg after a weapon breaks, see $1D87
    
      ; + indicates indexed by object code
+$2600 ; Table of object sizes? - NOTE use object code as index
+$262A ; Table of required strengths see $1C9E.
+$267E ; Table of weapon durability see $1D71
+$26A8 ; Max throw damage of weapon see $1D62 
+$26D2 ; Max throw rnd subtraction from max weapon damage, see $1D62
+$26FC ; Max melee damage of weapon see $1CEB
+$2726 ; Max melee rnd subtraction from max weapon damage, see $1CEB
$2750 ; First word of object description eg A
$277A ; Second word eg SMALL
$27A4 ; Final word eg HOLDALL. NOTE: A zero for any word=>no more words.


$27FA ; Records weight inside holdall. Object location $FF means in holdall.
$27FB
$27FC ; Number of objects

$27FE is number of characters

xThese tables are indexed by character class index which goes from $0 to $0F
x$2820 Table with first NPC word, see $1BEA
x$2840 Table with second NPC word
x$2860 Table with third NPC word
x$2880 Dunno but indexed by character class like $2820 see $0D01, fight or flee maybe, see $0D79?
x$28A0 Dunno but indexed by character class like $2820 see $0D01

$28EB is loaded in $20BD but I don't know what it means

*Each instance of an NPC has an index X which can go from $0 to $23
*$2968 start of data table. This identifies char class. Bit 7=1 means hostile. AND &7F=> index in $2820/40/60/80/A0 tables
*$298E start of data table. This gives health of the character.
*$29B4 start of data table. This gives location index of character.

$28C6 start of data table that is used to assess health in $1C02.
It is really table $298E=$28C6+C8 ie index is of a carried location.
(Indexed by location in $1D2E, location might means carrier of object!)

$29DA start of data table recording weight carried by character see $1B9F - $29DA is player

$Y is set to the player location $89 for these:
$2A00-2AB0 are low bytes of addresses ie LB=$2A00+Y
$2B00-2BB0 are high bytes of addresses ie HB=$2B00+Y
From values in $2B00 table, seems Y can go from 0 to B0 or 0 to 176.
Note also that routine $1CBE stores stuff in the $2A00 table.
So $2C00 to $33FF is some kind of look up table used by routine at $20A7

$2A08 is really $2AD0 cos of +$C8
*$2AD0 Bit 7 is set when this character done an attack. Bits 0-6 of these bytes are zeroed in $0C1E
*$2BD0 Stores where character X has decided to move, I think


$2AD0-2AF5 - zeroed in $143C loop, bits 0-6 wiped in $0C1E, bit 7 zeroed in $0CEE

$2BC0 contains value from hardware clock from OSWORD 1 see $2AC0

$3400- Offsets for words stored from $3600
$3600-$3B04 Words. Commands are first: directions, combat then other ones then all other words.