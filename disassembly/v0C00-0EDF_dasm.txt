L0010   = $0010
L0011   = $0011
L0013   = $0013
L0014   = $0014
L0015   = $0015
L0016   = $0016
L0017   = $0017
L0018   = $0018
L0019   = $0019
L001A   = $001A
L001B   = $001B
L001C   = $001C
L0020   = $0020
L0077   = $0077
L007A   = $007A
L007B   = $007B
L0083   = $0083
L0089   = $0089
L008A   = $008A
L008C   = $008C
USERV   = $0200
BRKV    = $0202
IRQ1V   = $0204
IRQ2V   = $0206
CLIV    = $0208
BYTEV   = $020A
WORDV   = $020C
WRCHV   = $020E
RDCHV   = $0210
FILEV   = $0212
ARGSV   = $0214
BGETV   = $0216
BPUTV   = $0218
GBPBV   = $021A
FINDV   = $021C
FSCV    = $021E
EVNTV   = $0220
UPTV    = $0222
NETV    = $0224
VDUV    = $0226
KEYV    = $0228
INSV    = $022A
REMV    = $022C
CNPV    = $022E
IND1V   = $0230
IND2V   = $0232
IND3V   = $0234
L124E   = $124E
L1263   = $1263
L1267   = $1267
L126B   = $126B
L126F   = $126F
L1273   = $1273
L1277   = $1277
L127B   = $127B
L127F   = $127F
L149C   = $149C
L14A7   = $14A7
L14B8   = $14B8
L14CE   = $14CE
L163F   = $163F
L1B6C   = $1B6C
L1BEA   = $1BEA
L1C88   = $1C88
L1CCA   = $1CCA
L1D40   = $1D40
L20BD   = $20BD
L20FA   = $20FA
L229F   = $229F
L24DD   = $24DD
L25C0   = $25C0
L27FE   = $27FE
L2880   = $2880
L28A0   = $28A0
L2968   = $2968
L298E   = $298E
L29B4   = $29B4
L2AD0   = $2AD0
L2BD0   = $2BD0
L3500   = $3500
L3B51   = $3B51
L3BEB   = $3BEB
L3BEF   = $3BEF
L42A0   = $42A0
LAD16   = $AD16
LB337   = $B337
OSRDRM  = $FFB9
OSEVEN  = $FFBF
GSINIT  = $FFC2
GSREAD  = $FFC5
NVWRCH  = $FFC8
NVRDCH  = $FFCB
OSFIND  = $FFCE
OSGBPB  = $FFD1
OSBPUT  = $FFD4
OSBGET  = $FFD7
OSARGS  = $FFDA
OSFILE  = $FFDD
OSRDCH  = $FFE0
OSASCI  = $FFE3
OSNEWL  = $FFE7
OSWRCH  = $FFEE
OSWORD  = $FFF1
OSBYTE  = $FFF4
OSCLI   = $FFF7

; $0C00 routine is central to the game. In order, it:
; 1. Prints the magenta dashes indicating the start of turn
; 2. Prints out creature info
; 3. Asks for and encodes user input in JSR $229F call
        org     $0C00
.BeebDisStartAddr
        STA     L0015 ; zero at call at start of game main loop
        BPL     L0C07 ; Branches if A>=0

        JMP     L0CAE ; Dunno what this does

.L0C07
        JSR     L3BEB ; Prints 10 spaces

        LDA     #$85  ; Magenta
        JSR     OSWRCH

        LDX     #$14
        LDA     #$5F 
        JSR     L3BEF ; Print 15 dashes

        JSR     L3B51 ; Print newline and sets colour based on &6F

        JSR     L42A0 ; Calls $0F03 to set player location and before that handles special events

        LDX     #$25  ; 37 is total number of characters, dead or alive.
.L0C1E                ; Loop from $2AF5 down to $2AD0. Used to signal info on the characters.
        LDA     L2AD0,X
        AND     #$80  ; Blank all but bit 7
        STA     L2AD0,X
        DEX
        BPL     L0C1E ; Loop branch

        LDX     L27FE ; $27FE is number of characters, starts as $24 (why is $25 hard coded above?)
        DEX
.L0C2D                ; Outer loop through all characters except player X=0
        JSR     L0CDE ; Handles object transfer, combat etc and print messages re WEAK, DYING & DEATH

        DEX
        BNE     L0C2D ; Continue outer loop of characters, excluding player ie X=0

        LDX     L27FE ; X=number of characters
        DEX
.L0C37                ; Start loop over NPCs to see who is here with the player
        BIT     L2AD0 
        BVS     L0C75 ; Branch if player has bit 6 set? Gets set in $0E3C

        LDA     L29B4,X ; A = location of character X
        CMP     L0089   ; Player location
        BNE     L0C75   ; If not the same branch forward
                        ; character X and player in same place
        STX     L0010   ; ?$10=X index of character
        LDA     L008A   ; $8A about to be set in $20BD
        PHA             ; Save it on the stack. What else is it used for?
        JSR     L20BD   ; Setup info based on player's location

        BMI     L0C70   ; Branch if negative which means it is dark at player's location

        TXA             ; A=index of NPC
        CLC                
        ADC     #$C8    ; Add $C8 to make a carry location
        TAX             ; X = carry location of NPC
        STX     L0011   ; $11 stores carry location of NPC
        JSR     L1BEA   ; Print description of NPC

        JSR     L14CE
        IS HERE WITH

.L0C5E
        LDA     L0011   ; A=carry location of this NPC
        JSR     L164C   ; Print what the NPC is carrying or NOTHING

        LDA     L25C0   ; Load location of holdall
        CMP     L0011   ; Is it being carried by this NPC
        BNE     L0C6D   ; Branch if not
                      ; This NPC has the holdall
        JSR     L163F ; Print out the holdall and its contents

.L0C6D
        JSR     L149C ; Reset colour to white print newline

.L0C70
        PLA           ; Pull value of stack, it's the index of the character
        STA     L008A ; $8A contains index of the character
        LDX     L0010 ; $10 also contains index of the character
.L0C75
        DEX           ; Decrement
        BNE     L0C37 ; Branch back to continue loop

.L0C78                ; User input loop
        LDA     #$00
        STA     L008C ; ?$8C=0
        JSR     L229F ; Get user input

        CPX     #$02
        BEQ     L0C78 ; Branch back to get input again if X=2 ie only return was pressed

        LDA     L0083 ; Index of first matched command
        BPL     L0C8E ; Branch if A>=0, something was matched
                      ; A<0 means nothing matched, but something was entered.
        JSR     L3500 ; Try and match a word such as CABIN and put direction command for it in $8C
                      ; $83 will be zero if such a word was found
        LDA     L0083
        BNE     L0C78 ; Branch if $3500 didn't return zero
                      ; $3500 returned zero 
.L0C8E
        CMP     #$25  ; Does it match END?
        BCC     L0C98 ; Branch if not
                      ; User wants to quit
        JSR     L14A7 ; Execute the END command
                      ; If user changed their mind about quitting then ask for input 
        JMP     L0C78 ; Final branch back for 0C78 loop

.L0C98                ; Check for remaining NPC interactions
        LDX     L27FE ; Number of characters
        DEX
        LDA     #$80  ; Put $80 in $15
        STA     L0015
.L0CA0                  ; Begin loop over NPCs
        LDA     L29B4,X ; A=location of character X
        CMP     L0014   ; Is this previous location of player?
        BEQ     L0CAA   ; Branch if locations match
                        ; locations don't match
        JSR     L0CD9   ; Check if combat or picking up is needed for character X and do it and print

.L0CAA                  
        DEX             ; Next character
        BNE     L0CA0   ; Branch as long as it's an NPC

        RTS

.L0CAE  ; $0C00 routine JMPs here if called with ?$15=A>=$80
        LDX     L27FE   ; Load number of characters
        DEX
.L0CB2                  ; Loop through all NPCs X>0
        LDA     L29B4,X ; Load NPC location
        CMP     L0014   ; Player's location, or possibly player's previous location?
        BNE     L0CBC   ; Branch if location's differ to do next iteration of loop
                        ; Location's match so something involving player
        JSR     L0CD9   ; Check if character X attacks or picks up

.L0CBC
        DEX
        BNE     L0CB2 ; Exit loop without doing player X=0

        LDX     L27FE
        DEX
.L0CC3                   ; Loop through all NPCs X>0
        LDA     L298E,X  ; Load health
        BEQ     L0CD5    ; Branch if NPC dead, nothing to do!
                        
        LDA     L2AD0,X  ; Load status for NPC
        AND     #$60     ; $60 has only bits 5 or 6 set
        BEQ     L0CD5    ; Branch if neither bits 5 or 6 set
                         ; Bit 5 or 6 set so this NPC wants to move
        LDA     L2BD0,X  ; Load intended destination for NPC
        STA     L29B4,X  ; Put them in their new location.
.L0CD5
        DEX
        BNE     L0CC3

        RTS

.L0CD9  ; Decide if character X attacks or pickups and and print results
        BIT     L2AD0 
        BVS     L0CED ; Branch if bit 6 set, meaning something happened with player so RTS

.L0CDE  ; Similar to $0CD9 but without the check on the player              
        LDA     L298E,X ; Health of character X
        BEQ     L0CED ; If health is zero this character is dead so RTS
            
        STX     L0016 ; Save X
        JSR     L0CEE ; Check, perform and print combat and picking up for character X

        JSR     L149C ; prints newline

        LDX     L0016
.L0CED
        RTS

.L0CEE  ; Check, perform and print combat and picking up for character X
        LDA     L29B4,X ; Location of character X.
        STA     L001A   ; Store potential location of an interaction.
        LDA     L2AD0,X ; Set to $80 if this character has performed an attack already this turn
        STA     L0013
        BIT     L0015 
        BPL     L0D01

        AND     #$7F    ; Zero bit 7 
        STA     L2AD0,X ; and store it back
.L0D01
        LDA     L2968,X ; If bit 7 set hostile to player, lower bits specify class.
        STA     L001B
        AND     #$1F    ; A=class of character
        TAY             ; Y=A
        LDA     L2880,Y ; Some property of a character class 
        STA     L0018   
        LDA     L28A0,Y ; Some property of a character class
        STA     L0019
        ORA     L0018
        BNE     L0D22 ; branch if one or both of $18 and $19 have bits set
                      ; Both $18 and $19 are zero
        JSR     L0D8D ; Inner loop through characters to find any hostiles at same location
                      ; A=?$10=greatest health amongst hostile characters
        BEQ     L0D1F ; Branch if A=0 ie no hostiles
                      ; There are hostiles 
        JMP     L0E5B ; Handle combat, consequences, picking up of weapons and printing

.L0D1F                ; No hostiles
        JMP     L0E99 ; Handle picking up of weapons

.L0D22
        JSR     L0D8D ; See above

        BEQ     L0D6E ; Branch if A=0 ie no hostiles
                      ; There are hostiles
        LDA     L0019 ;
        BEQ     L0D36 ; Branch ahead if $19 is zero
                      ; $19 is non-zero
        BIT     L0013 ; $2AD0 for the outer loop character
        BPL     L0D55 ; Branch ahead if ?$13>=0 ie character performed an attack this turn

        JSR     L0D3D ; Movement decision of NPC, setting of intentions in $2AD0/$2BD0 tables

        LDA     L0010 ; Load the selected exit+1 for NPC, zero if not moving 
        BNE     L0D54 ; Branch if an exit was selected to RTS
                      ; No movement
.L0D36                ; 
        JSR     L0E5B ; Handle combat and picking up of weapons

        LDA     L0010 ; Set to $FF if attack or object transferred occurred in $0E5B
        BEQ     L0DB9 ; Branch if nothing happened
                      ; Carry on if something happened
                      
.L0D3D                ; Do setup and then movement decision of NPC, setting of intentions in $2AD0/$2BD0 tables
                      ; ?$10=0 indicates player is here or was here last turn
                      ; On exit $10 is zero if no movement for this NPC
                      ; $10 is set to index+1 of selected exit in location block
        LDA     #$FF
        STA     L0010 ; ?$10=$FF
        LDA     L001A 
        CMP     L001C ; Location of the player two turns ago, I think
        BEQ     L0D65 ; Branch if locations match
                      ; Locations don't match
        CMP     L0014 ; Location of the player last turn, I think
        BNE     L0D79 ; Branch if locations match

        LDA     L0089 ; A=current player location
        JMP     L0D67

.L0D50                ; ?$10=0 indicates player is here or was here last turn
        LDA     #$00
        STA     L0010
.L0D54
        RTS

.L0D55
        JSR     L0E5B

        LDA     L0010
        BNE     L0D54

        JSR     L0D3D

        LDA     L0010
        BNE     L0D54

        BEQ     L0DB9

.L0D65
        LDA     L0014 ; Load previous location of player
.L0D67                ; Arrives here with A=?$89
        CMP     L001A ; Does it match location of outer loop character?
        BEQ     L0D50 ; Branch if yes to return
                      
        JMP     L0DFF ; JMP is no so JMP ahead to set up $2AD0/2BD0 and other stuff

.L0D6E
        JSR     L0E99 ; Try to pick up objects

        LDA     L0010 ; 0 if nothing picked up, $FF is something was
        BNE     L0D54 ; Branch if something picked up to RTS
                      ; Nothing picked up
        LDA     L0019
        BNE     L0D3D ; Branch if ?$19!=0 to do movement

.L0D79                
        JSR     L1C88 ; A= random byte

        AND     #$0F  ;
        STA     L0010 ; ?$10 = random in $0-F
        LDA     L0018 ; Some property of the character class
        AND     #$0F  ; zero bits 4-7
        CMP     L0010 
        BCS     L0DB9 ; Branch if ?$18>=random number
                      ; If not return with ?$10=0
.L0D88
        LDA     #$00
.L0D8A
        STA     L0010
        RTS

.L0D8D                 ; Perform inner loop to see if any character is at same location
                       ; as one in outer loop and to see if they are hostile.
                       ; On exit A=?$10=0 if no hostiles
        LDA     #$00
        STA     L0010  ; Zeroed so to find the hostile character with greatest health
        LDX     L27FE  ; Number of characters
        DEX
.L0D95                  ; Begin a loop to see if this character inc player meet outer loop character
        LDA     L29B4,X ; Location of character X.
        CMP     L001A   ; Does it match the place of potential action set in $0CEE?
        BNE     L0DB3   ; No match, branch ahead to continue loop
                        ; They are both at $1A
        LDA     L2968,X ; Load this char's alignment(bit 7) and class (bits 0-4)
        EOR     L001B   ; Exclusive OR to detect difference
        BPL     L0DB3   ; Branch if bit 7 was the same... cos friends? 
                        ; Potential enemy?
        BIT     L2AD0   ; Not sure
        BVS     L0DB3   ; Branch if bit 6 was set... not an enemy?
                        ; An enemy?
        LDA     L298E,X ; Load health of character X into A
        CMP     L0010   ; 
        BCC     L0DB3   ; Branch if A<?$10 ie char X less health so non-hostile?
                        ; Char X has >=health to anyone checked so far 
        STA     L0010   ; ?$10=A ie $10 contains the max value from the $298E table
        STX     L0017   ; ?$17=X ie $17 contains the most healthy, hostile character.
.L0DB3
        DEX
        BPL     L0D95   ; Keep looping including X=0, the player

        LDA     L0010   ; A=0 if there were no hostile characters
        RTS

.L0DB9                ; Try and a choose a random direction for NPC to move
        LDY     L001A ; Y = location of outer loop character
        JSR     L124E ; Loads up info for location Y

        LDA     L007A ; A=number of directions out of this location
        BEQ     L0D8A ; Branch if zero to set ?$10=0 and RTS
                      ; There's more than one exit
.L0DC2
        JSR     L1C88 ; Random byte

        AND     #$07  ; A = random number $0-7
        CMP     L007A 
        BCS     L0DC2 ; If A>=$7A then invalid exit so branch back and try again
                      ; Valid exit found
        TAX           ; X = A ie index of the exit
        INX           ; Inc X
        JSR     L0DE2 ; Sets C=1 and X=?$10=index of selected exit plus 1

        BCS     L0DD6 ; Branch if carry set
                      ; If carry clear
.L0DD2               
        LDA     #$FF
        BNE     L0D8A ; Branch always to ?$10=FF and RTS

.L0DD6
        LDX     L007A ; X=number of directions out of this location
.L0DD8                ; Loop through all exits
        JSR     L0DE2 ; Check exit in X

        BCC     L0DD2 ; Branch if C=0

        DEX           ; Decrement
        BNE     L0DD8 ; Branch back to check next exit
                     
        BEQ     L0D88 ; Branch always once loop is done branch to ?$10=0 and RTS

.L0DE2                ; Checks to see if exit is suitable and if it is record it in $2BD0 table
                      ; Also sets either bits 5 or 6 of $2AD0 for character
        STX     L0010 ; Save X in $10 - this is the index of the exit plus 1
        LDY     L007B ; Y=index of direction map in this location's direction block
.L0DE6                ; Begin loop counting down in X, ie X=0 means we've got our exit
        DEX           ; Dec X
        BEQ     L0DF2 ; Branch if zero cos we've found our exit
                      ; X is non-zero, move to next exit
        LDA     (L0077),Y ; Load the first direction
        BPL     L0DEE ; Branch A>=0 ie it's a standard direction
                      ; A<0 then that means there are two bytes following it
        INY           ; Inc Y skip the extra byte
.L0DEE                
        INY           ; Skip two bytes to get to next exit
        INY
        BNE     L0DE6 ; Always branch to loop again (Y isn't going to get to $FF cos X=0 first)

.L0DF2                    ; Found the selected exit
        LDA     (L0077),Y ; A = direction byte
        AND     #$40      ; Test for bit 6
        BNE     L0DFC     ; Branch if bit 6 set in A
                          ; If not carry on
.L0DF8
        SEC               ; C=1
.L0DF9
        LDX     L0010     ; X=index of selected exit plus one, see STX at $0DE2
        RTS

.L0DFC
        INY               ; Inc Y
        LDA     (L0077),Y ; A = destination byte
.L0DFF                    ; 
        TAX               ; X = destination byte
        LDA     L0018     ; A=$18 some property of character in outer loop
        PHA               ; Push onto stack
        TXA               ; A = destination byte
        LDY     #$03      ; Y=3
.L0E06
        TAX               ; X= destination byte
        PLA               ; A= value of $18
        ASL     A         ; A=2*a
        PHA               ; Push onto stack
        TXA               ; A=destination byte
        BCC     L0E35     ; Branch if bit 7 of $18 is clear to continue next loop iteration
                          ; bit 7 of $18 set
        CMP     L1263,Y   ; Dunno what this is
        BCC     L0E17     ; Branch ahead if A<?$(1263+Y)

        CMP     L1273,Y
        BCC     L0E3C     ; Branch if A<?$(1273+Y) to leave loop

.L0E17
        CMP     L1267,Y
        BCC     L0E21     ; Branch ahead if A<?$(1267+Y)

        CMP     L1277,Y
        BCC     L0E3C     ; Branch if A<?$(1277+Y) to leave loop

.L0E21
        CMP     L126B,Y
        BCC     L0E2B     ; Branch ahead

        CMP     L127B,Y
        BCC     L0E3C    ; Branch to leave loop

.L0E2B
        CMP     L126F,Y
        BCC     L0E35    ; Branch ahead

        CMP     L127F,Y
        BCC     L0E3C    ; Branch to leave loop

.L0E35
        DEY              ; Decrement
        BPL     L0E06    ; Branch of Y>=0 to repeat loop
                         ; Exiting loop
        PLA              ; A=doubled value of $18
        JMP     L0DF8    ; RTS from $0DE2 with C=1

.L0E3C                   ; Found something in above loop
        TAX              ; X=destination byte
        PLA              ; A=doubled value of $18
        TXA              ; X=A
        BIT     L0015    
        BPL     L0E58    ; Branch if $15>=0
                         ; $15<0
        LDX     L0016    ; index of outer loop character
        STA     L2BD0,X  ; Store destination of character X
        LDA     L2AD0,X  ; A = info about what character X has done this turn
        BIT     L0013    ; Old value of $2AD0,X prior to combat checking
        BMI     L0E53    ; Branch if $13 has bit 7 set ie character has done combat this turn
                         ; Bit 7 not set
        ORA     #$20     ; Set bit 5
        BNE     L0E55    ; Branch always

.L0E53                   
        ORA     #$40     ; Set bit 6
.L0E55
        STA     L2AD0,X  ; Store new value with bit 5 or 6 set
.L0E58
        CLC              
        BCC     L0DF9    ; Always branch to $0DF9 to RTS from $0DE2 with carry clear

.L0E5B                  ; Handle combat and picking up of weapons
			; On exit ?$10=FF if an attack happened or object transferred
			;         ?$10=0 if nothing happened
        LDA     #$00
        STA     L0010   ; ?$10=0
        LDX     #$0A    ; X=$A
.L0E61                  ; Loop through objects from $0A to $23 ie weapons for possible attack
        LDA     L25C0,X ; Load location of object X
        CMP     #$FF    ; 
        BNE     L0E6B   ; Branch if not in holdall
                        ; Object X is in holdall
        LDA     L25C0   ; A=The holdall's location
.L0E6B
        SEC             ; Subtract C8 because if object is carried this will give index of carrier
        SBC     #$C8    ; A=A-C8 = index of carrier
        CMP     L0016   ; $16 is index of character in outer loop
        BNE     L0E94   ; Branch if this object isn't held by character in outer loop
                        ; Outer loop character is carrying object X
        STX     L0011   ; ?$11=X ie save object index
        LDA     L0017   ; A = index of most healthy hostile character to outer loop one
        CLC
        ADC     #$C8    ; Add C8 to A to turn it into a character location
        TAY             ; Y=A
        JSR     L1C88   ; Puts a pseudorandom number in A?

        LDX     L0011   ; Load object index back into X
        CMP     #$C0    
        BCC     L0E8B   ; Branch if random byte A<$C0, 80% chance - melee attack?
                        ; If A>=$C0, 20% chance - throw attack?
        LDA     L0015   ; 
        JSR     L1D40   ; Handle throw attack, outcome and print result

        JMP     L0E90   ; Branch ahead with C=0 so will go to $0ED5 and RTS

.L0E8B                  
        LDA     L0015   ; A=?$15
        JSR     L1CCA   ; Handle melee attack, outcome and print result

.L0E90                
        LDX     L0011 ; X=?$11 the object index
        BCC     L0ED5 ; C=0 means attack occured so branch to ?$10=$FF then RTS 

.L0E94
        INX           ; Inc X
        CPX     #$23  ; Is it $23=35? <$23 are weapons, >= aren't
        BNE     L0E61 ; Branch to continue loop if object is still a weapon
                      ; No more weapons to check
                      
.L0E99                ; Handles picking up of objects eg An elf takes an axe
                      ; On entry $16 contains destination minus $C7
        LDA     #$00
        STA     L0010 ; ?$10=0
        LDX     #$0A  ; X=$A ie the flint
.L0E9F                ; Loop through weapons again to see if one is picked up
        LDA     L25C0,X 
        CMP     L001A 
        BNE     L0EDA ; Branch if location isn't ?$1A. Will keep doing this until X=$23
                      ; Location is ?$1A
        STX     L0011 ; ?$11=X
        LDA     L0016 
        ADC     #$C7  ; ?$16 + $C7 specifies destination of object, could be character
        TAY           ; Y=A
        LDA     L0015 ;
        JSR     L1B6C ; Handles transfer of object
                      ; Returns with C=1 if transfer couldn't happen eg holdall full
        LDX     L0011
        BCS     L0EDA ; Branch if transfer failed
                      ; Transfer succeeded
        BIT     L0015
        BPL     L0ED5 ; Branch to ?$10=&FF and RTS

        LDA     L001A ; Don't print out if player isn't there
        CMP     L0089
        BNE     L0ED5 ; Branch to ?$10=&FF and RTS

        LDA     L0016  
        ADC     #$C7   ; ?$16 + $C7 specifies index of NPC
        TAX            
        JSR     L1BEA  ; Prints three words describing NPC specified by X

        LDA     #$BB   ; Print TAKES
        JSR     L14B8

        LDX     L0011  ; Print object description
        JSR     L24DD

        JSR     L20FA  ; Print . and newline

.L0ED5
        LDA     #$FF
        STA     L0010
        RTS

.L0EDA
        INX
        CPX     #$23  ; $23 is beer! <$23 is a weapon (and >=$0A)
        BNE     L0E9F ; Loop back if X<$23 to continue loop for pick up search

        RTS

.BeebDisEndAddr
SAVE "v0C00-0EDF_dasm.bin",BeebDisStartAddr,BeebDisEndAddr


; 0C00 85 15 10 03 4C AE 0C 20 EB 3B A9 85 20 EE FF A2 ----L-- -;-- --- OOOOOOOOOOOOOOOO
; 0C10 14 A9 5F 20 EF 3B 20 51 3B 20 A0 42 A2 25 BD D0 --_ -; Q; -B-%-- OOOOOOOOOOOOOOOO
; 0C20 2A 29 80 9D D0 2A CA 10 F5 AE FE 27 CA 20 DE 0C *)---*-----'- -- OOOOOOOOOOOOOOOO
; 0C30 CA D0 FA AE FE 27 CA 2C D0 2A 70 39 BD B4 29 C5 -----'-,-*p9--)- OOOOOOOOOOOOOOOO
; 0C40 89 D0 32 86 10 A5 8A 48 20 BD 20 30 23 8A 18 69 --2----H - 0#--i OOOOOOOOOOOOOOOO
; 0C50 C8 AA 86 11 20 EA 1B 20 CE 14 3E 37 B3 00 A5 11 ---- -- -->7---- OOOOOOOOOOOOOODO
; 0C60 20 4C 16 AD C0 25 C5 11 D0 03 20 3F 16 20 9C 14  L---%---- ?- -- OOOOOOOOOOOOOOOO
; 0C70 68 85 8A A6 10 CA D0 BF A9 00 85 8C 20 9F 22 E0 h----------- -"- OOOOOOOOOOOOOOOO
; 0C80 02 F0 F5 A5 83 10 07 20 00 35 A5 83 D0 EA C9 25 ------- -5-----% OOOOOOOOOOOOOOOO
; 0C90 90 06 20 A7 14 4C 78 0C AE FE 27 CA A9 80 85 15 -- --Lx---'----- OOOOOOOOOOOOOOOO
; 0CA0 BD B4 29 C5 14 F0 03 20 D9 0C CA D0 F3 60 AE FE --)---- -----`-- OOOOOOOOOOOOOOOO
; 0CB0 27 CA BD B4 29 C5 14 D0 03 20 D9 0C CA D0 F3 AE '---)---- ------ OOOOOOOOOOOOOOOO
; 0CC0 FE 27 CA BD 8E 29 F0 0D BD D0 2A 29 60 F0 06 BD -'---)----*)`--- OOOOOOOOOOOOOOOO
; 0CD0 D0 2B 9D B4 29 CA D0 EB 60 2C D0 2A 70 0F BD 8E -+--)---`,-*p--- OOOOOOOOOOOOOOOO
; 0CE0 29 F0 0A 86 16 20 EE 0C 20 9C 14 A6 16 60 BD B4 )---- -- ----`-- OOOOOOOOOOOOOOOO
; 0CF0 29 85 1A BD D0 2A 85 13 24 15 10 05 29 7F 9D D0 )----*--$---)--- OOOOOOOOOOOOOOOO
; 0D00 2A BD 68 29 85 1B 29 1F A8 B9 80 28 85 18 B9 A0 *-h)--)----(---- OOOOOOOOOOOOOOOO
; 0D10 28 85 19 05 18 D0 0B 20 8D 0D F0 03 4C 5B 0E 4C (------ ----L[-L OOOOOOOOOOOOOOOO
; 0D20 99 0E 20 8D 0D F0 47 A5 19 F0 0B 24 13 10 26 20 -- ---G----$--&  OOOOOOOOOOOOOOOO
; 0D30 3D 0D A5 10 D0 1E 20 5B 0E A5 10 F0 7C A9 FF 85 =----- [----|--- OOOOOOOOOOOOOOOO
; 0D40 10 A5 1A C5 1C F0 1E C5 14 D0 2E A5 89 4C 67 0D ----------.--Lg- OOOOOOOOOOOOOOOO
; 0D50 A9 00 85 10 60 20 5B 0E A5 10 D0 F8 20 3D 0D A5 ----` [----- =-- OOOOOOOOOOOOOOOO
; 0D60 10 D0 F1 F0 54 A5 14 C5 1A F0 E5 4C FF 0D 20 99 ----T------L-- - OOOOOOOOOOOOOOOO
; 0D70 0E A5 10 D0 DF A5 19 D0 C4 20 88 1C 29 0F 85 10 --------- --)--- OOOOOOOOOOOOOOOO
; 0D80 A5 18 29 0F C5 10 B0 31 A9 00 85 10 60 A9 00 85 --)----1----`--- OOOOOOOOOOOOOOOO
; 0D90 10 AE FE 27 CA BD B4 29 C5 1A D0 17 BD 68 29 45 ---'---)-----h)E OOOOOOOOOOOOOOOO
; 0DA0 1B 10 10 2C D0 2A 70 0B BD 8E 29 C5 10 90 04 85 ---,-*p---)----- OOOOOOOOOOOOOOOO
; 0DB0 10 86 17 CA 10 DF A5 10 60 A4 1A 20 4E 12 A5 7A --------`-- N--z OOOOOOOOOOOOOOOO
; 0DC0 F0 C8 20 88 1C 29 07 C5 7A B0 F7 AA E8 20 E2 0D -- --)--z---- -- OOOOOOOOOOOOOOOO
; 0DD0 B0 04 A9 FF D0 B4 A6 7A 20 E2 0D 90 F5 CA D0 F8 -------z ------- OOOOOOOOOOOOOOOO
; 0DE0 F0 A6 86 10 A4 7B CA F0 09 B1 77 10 01 C8 C8 C8 -----{----w----- OOOOOOOOOOOOOOOO
; 0DF0 D0 F4 B1 77 29 40 D0 04 38 A6 10 60 C8 B1 77 AA ---w)@--8--`--w- OOOOOOOOOOOOOOOO
; 0E00 A5 18 48 8A A0 03 AA 68 0A 48 8A 90 28 D9 63 12 --H----h-H--(-c- OOOOOOOOOOOOOOOO
; 0E10 90 05 D9 73 12 90 25 D9 67 12 90 05 D9 77 12 90 ---s--%-g----w-- OOOOOOOOOOOOOOOO
; 0E20 1B D9 6B 12 90 05 D9 7B 12 90 11 D9 6F 12 90 05 --k----{----o--- OOOOOOOOOOOOOOOO
; 0E30 D9 7F 12 90 07 88 10 CE 68 4C F8 0D AA 68 8A 24 --------hL---h-$ OOOOOOOOOOOOOOOO
; 0E40 15 10 15 A6 16 9D D0 2B BD D0 2A 24 13 30 04 09 -------+--*$-0-- OOOOOOOOOOOOOOOO
; 0E50 20 D0 02 09 40 9D D0 2A 18 90 9E A9 00 85 10 A2  ---@--*-------- OOOOOOOOOOOOOOOO
; 0E60 0A BD C0 25 C9 FF D0 03 AD C0 25 38 E9 C8 C5 16 ---%------%8---- OOOOOOOOOOOOOOOO
; 0E70 D0 22 86 11 A5 17 18 69 C8 A8 20 88 1C A6 11 C9 -"-----i-- ----- OOOOOOOOOOOOOOOO
; 0E80 C0 90 08 A5 15 20 40 1D 4C 90 0E A5 15 20 CA 1C ----- @-L---- -- OOOOOOOOOOOOOOOO
; 0E90 A6 11 90 41 E8 E0 23 D0 C8 A9 00 85 10 A2 0A BD ---A--#--------- OOOOOOOOOOOOOOOO
; 0EA0 C0 25 C5 1A D0 34 86 11 A5 16 69 C7 A8 A5 15 20 -%---4----i----  OOOOOOOOOOOOOOOO
; 0EB0 6C 1B A6 11 B0 24 24 15 10 1B A5 1A C5 89 D0 15 l----$$--------- OOOOOOOOOOOOOOOO
; 0EC0 A5 16 69 C7 AA 20 EA 1B A9 BB 20 B8 14 A6 11 20 --i-- ---- ----  OOOOOOOOOOOOOOOO
; 0ED0 DD 24 20 FA 20 A9 FF 85 10 60 E8 E0 23 D0 C0 60 -$ - ----`--#--` OOOOOOOOOOOOOOOO

