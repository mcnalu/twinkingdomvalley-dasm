L0000   = $0000
L0001   = $0001
L0018   = $0018
L0025   = $0025
L0028   = $0028
L0077   = $0077
L0079   = $0079
L007A   = $007A
L007B   = $007B
L007C   = $007C
L007D   = $007D
L007F   = $007F
L0080   = $0080
L0081   = $0081
L0084   = $0084
L0086   = $0086
L0087   = $0087
L0089   = $0089
L008A   = $008A
L008C   = $008C
USERV   = $0200
BRKV    = $0202
IRQ1V   = $0204
IRQ2V   = $0206
CLIV    = $0208
BYTEV   = $020A
WORDV   = $020C
WRCHV   = $020E
RDCHV   = $0210
FILEV   = $0212
ARGSV   = $0214
BGETV   = $0216
BPUTV   = $0218
GBPBV   = $021A
FINDV   = $021C
FSCV    = $021E
EVNTV   = $0220
UPTV    = $0222
NETV    = $0224
VDUV    = $0226
KEYV    = $0228
INSV    = $022A
REMV    = $022C
CNPV    = $022E
IND1V   = $0230
IND2V   = $0232
IND3V   = $0234
L0810   = $0810
L0A80   = $0A80
L0B12   = $0B12
L1F00   = $1F00
L1FC0   = $1FC0
L1FD9   = $1FD9
L20A7   = $20A7
L20BD   = $20BD
L20EA   = $20EA
L20FA   = $20FA
L21CD   = $21CD
L2580   = $2580
L2750   = $2750
L277A   = $277A
L27A4   = $27A4
L27CE   = $27CE
L29B4   = $29B4
L3B20   = $3B20
L3B32   = $3B32
L3B51   = $3B51
L3B6C   = $3B6C
OSRDRM  = $FFB9
OSEVEN  = $FFBF
GSINIT  = $FFC2
GSREAD  = $FFC5
NVWRCH  = $FFC8
NVRDCH  = $FFCB
OSFIND  = $FFCE
OSGBPB  = $FFD1
OSBPUT  = $FFD4
OSBGET  = $FFD7
OSARGS  = $FFDA
OSFILE  = $FFDD
OSRDCH  = $FFE0
OSASCI  = $FFE3
OSNEWL  = $FFE7
OSWRCH  = $FFEE
OSWORD  = $FFF1
OSBYTE  = $FFF4
OSCLI   = $FFF7

        org     $23B5
.BeebDisStartAddr
        JSR     L0810

        ORA     (L0028,X)
        BIT     L0028
        BIT     L0018
        CLC
.L23C3
        LDA     L008C ; This is direction set in the $3500 implied from, eg, GO IN CABIN  
        STA     L0086 ; $86=$8C
        BNE     L23DE ; Branch if $86 non-zero 
                      ; $86 is zero
        TAY           ; Y=A
.L23CA                  ; Loop through matched commands using index Y
                        ; For each one that's a direction set bits using $23B5 table
        LDA     L0A80,Y ; Load command 
        CMP     #$0E    ; <$0E means it's a direction
        BCS     L23D9   ; Branch if it's not a direction
                        ; Command is a direction
        TAX             ; X=A, the index of a command
        LDA     L23B5,X ; Load a byte for this direction
        ORA     L0086   ; Set any bits present in $86 (none if zero!)
        STA     L0086   ; ?$86=direction byte
.L23D9
        INY             ; Inc Y
        CPY     L0084   ; Number of command words matched
        BNE     L23CA   ; Branch if there are more commands to process in this loop

.L23DE
        JSR     L24FB   ; Load info about current player location
                        ; A=?$7A the number of directions out of this location
        BEQ     L2418   ; Branch if there no exits
                        ; There are some exits
.L23E3       
        JSR     L21CD   ; Loads dir,dest bytes into $7C,$7D, $7B set to index for next pair

        LDA     L007C   ; Load dir byte
        AND     #$3F    ; Blank bits 6 and 7
        CMP     L0086   ; The commanded direction
        BEQ     L2452   ; Branch if this is where the user asked to go
                        ; Not a match
        BIT     L007C   
        BPL     L23F4   ; Branch ahead if bit 7 isn't set in dir byte
                        ; Bit 7 is set
        INC     L007B   ; Do extra inc needed in this case
.L23F4
        DEC     L007A   ; Decrement number of exits that remain to be checked
        BNE     L23E3   ; Branch if there's more to checked
                        ; Checked all exits
        LDA     L0087   ; Second byte from the location block
        STA     L007A   ; Store in $7A
        JSR     L2504   ; Calls end of $24FB to reset $7A,$7B to original values

.L23FF                  ; Loop to check if $86 contains a valid instruction
        JSR     L21CD   ; Load dir,dest byte pair

        LDA     L007C   
        AND     #$3F
        STA     L007F   ; Store dir in $7F
        ORA     L0086   ; Set bits from $86
        CMP     L007F   
        BEQ     L2452   ; Branch ahead if this is where the user wanted to go
                        ; Direction not a match
        BIT     L007C   
        BPL     L2414   ; Branch if bit 7 set in dir byte
                        ; Bit 7 is set
        INC     L007B   ; Skip extra byte
.L2414
        DEC     L007A   ; Decrement number of exits that remain to be checked
        BNE     L23FF   ; Branch if there are more exists to check
                        ; Failed to match an exit to $86
.L2418
        LDA     L0086   
        AND     #$01    
        BNE     L2424   ; Branch if bit 1 of $86 is set to tell user they can't go that way
                        ; bit 1 not set
        LDA     L0079   ; Load first byte of location block
        AND     #$07    ; Zero bits 3 to 7 
        BNE     L247A   ; Branch if not zero

.L2424
        JSR     L3B6C
        YOU CAN'T GO

.L242B                  ; This converts the commanded direction to text
        LDA     L0086   ; Load the direction
.L242D
        ASL     A       ; 2x
        ASL     A       ; 2x
        STA     L0080   ; Shift A the left twice and store in $80
        LDX     #$00
        STX     L0081   ; $81=0
.L2435
        ROL     L0080   ; 
        BCC     L244C   ; Branch if bit 7 set before ROL
                        ; bit 7 wasn't set
                        
        CPX     #$04
        BCC     L2446   ; Branch if X<4
                        ; X>=4
        LDA     L0081   ; A=?$81
        BEQ     L2446   ; Branch if ?$81=0
                        ; ?$81 is non-zero
        LDA     #$3C    ; This handles commands that were like UP AND SOUTH
        JSR     L1FD9   ; AND

.L2446
        TXA
        JSR     L1FD9

        INC     L0081
.L244C
        INX
        CPX     #$06
        BCC     L2435

        RTS

.L2452
        BIT     L007C
        BVC     L2424

        PLA
        PLA
        LDA     L007D
        
.L245A
        STA     L0089 ; Set the new player location
        STA     L29B4
        JSR     L20BD ; Set up stuff for new player location

        BIT     L008A 
        BVS     L2477 ; Branch if bit 6 of $8A set
                      ; Bit 6 clear
        LDA     L0001 ; A = display/desc option
        BMI     L2474 ; Branch if picture is drawn always 
                      ; Might draw picture...
        AND     #$20  ;
        BEQ     L2477 ; Never draw picture
                      ; Draw picture if room unvisited
        LDA     L008A ; Room visited
        AND     #$10
        BNE     L2477 ; If room visited, jump to avoid drawing picture

.L2474                ; Draw picture
        JMP     L2517

.L2477                ; Sets up info and prints out description and objects based on player's location.
        JMP     L20EA

.L247A
        CMP     #$02
        BCS     L2489

        JSR     L3B6C
        STEEP SLAG HEAPS BLOCK YOUR WAY

.L2488
        RTS

.L2489
        BNE     L2495

        JSR     L3B6C
        THE CLIFF IS TOO STEEP

.L2494
        RTS

.L2495
        CMP     #$04
        BCS     L24A3

        JSR     L3B6C
        THE MOUNTAINS ARE TOO STEEP

.L24A2
        RTS

.L24A3
        BNE     L24B0

        JSR     L3B6C
        THERE ARE BUSHES IN YOUR WAY

.L24AF
        RTS

.L24B0
        CMP     #$06
        BCS     L24BE

        JSR     L3B6C
        DENSE UNDERGROWTH BLOCKS YOUR WAY

.L24BD
        RTS

.L24BE
        BNE     L24CA

        JSR     L3B6C
        NO PASSAGE LEADS

.L24C7
        JMP     L242B

.L24CA
        JSR     L3B6C
        THE DUNES ARE TOO STEEP

.L24D3
        RTS
.L24D4
        JSR     L23C3

        JSR     L20FA

        JMP     L3B51
        
.L24DD                  ; Print info about objects
        LDA     L2580,X ; Lookup code for object X eg X=0=>$14
        TAX             ; X=code for the object now to look up follow words.
        LDA     L2750,X ; eg $2764=>$3A is A
        JSR     L24F6

        LDA     L277A,X ; eg $278E=>$75 is SMALL
        JSR     L24F6

        LDA     L27A4,X ; eg $27B9=>$76 is HOLDALL
        JSR     L24F6

        LDA     L27CE,X ; eg $27E2=>00 which indicates there are no more words
.L24F6                ; Prints out a word in A
        BEQ     L24D3 ; If A=0 then RTS

        JMP     L1FD9 ; Print the word and RTS

.L24FB                ; Processes and puts bytes from location block specified by $89 in &7A-7B
                      ; On entry $89 is a location
                      ; On exit:
                      ; $87 is second byte from location block
                      ; $7A has bit 0-2 copied from bits 5-7 of second byte, bits 3-7 are zero,
                      ;    ie number of directions out of this location.
                      ; $7B is 2nd byte from location block with bits 5-7 wiped +2, index of first byte after desc
                      ; A=?$7A
        LDY     L0089 
        JSR     L20A7 ; Load info on player's location

        LDA     L007A ; Second byte from location block
        STA     L0087
.L2504
        LDA     L007A 
        AND     #$1F  ; Wipe bits 5,6,7
        CLC
        ADC     #$02  ; Add 2
        STA     L007B ; Store in &7B
        LDA     L007A 
        LSR     A
        LSR     A
        LSR     A
        LSR     A
        LSR     A
        STA     L007A ; Slide bits 5,6,7 to 0,1,2
        RTS

.L2517
        LDA     L0025
        BEQ     L251E

        JSR     L3B20 ; Wait 2.56s

.L251E
        LDX     L0089
        LDA     L1F00,X
        TAX
        JSR     L0B12

        JSR     L3B32

        JSR     L1FC0

        JSR     L24FB

        LDA     L0079
        AND     #$08
        BNE     L2549

        JSR     L3B6C
        THE PICTURE IS YOUR VIEW

.L253F
        LDY     L007B
        LDA     (L0077),Y
        JSR     L242D

        JSR     L20FA

.L2549
        JMP     L0000

.BeebDisEndAddr
SAVE "command/v23B5-2549-dasm.bin",BeebDisStartAddr,BeebDisEndAddr


; 23B5 20 10 08 04 02 01 28 24 28 24 18 14 18 14 A5 8C  -----($($------ OOOOOOOOOOOOOOOO
; 23C5 85 86 D0 15 A8 B9 80 0A C9 0E B0 08 AA BD B5 23 ---------------# OOOOOOOOOOOOOOOO
; 23D5 05 86 85 86 C8 C4 84 D0 EC 20 FB 24 F0 35 20 CD --------- -$-5 - OOOOOOOOOOOOOOOO
; 23E5 21 A5 7C 29 3F C5 86 F0 64 24 7C 10 02 E6 7B C6 !-|)?---d$|---{- OOOOOOOOOOOOOOOO
; 23F5 7A D0 EB A5 87 85 7A 20 04 25 20 CD 21 A5 7C 29 z-----z -% -!-|) OOOOOOOOOOOOOOOO
; 2405 3F 85 7F 05 86 C5 7F F0 44 24 7C 10 02 E6 7B C6 ?-------D$|---{- OOOOOOOOOOOOOOOO
; 2415 7A D0 E7 A5 86 29 01 D0 06 A5 79 29 07 D0 56 20 z----)----y)--V  OOOOOOOOOOOOOOOO
; 2425 6C 3B 84 36 AF 00 A5 86 0A 0A 85 80 A2 00 86 81 l;-6------------ OODDDDOOOOOOOOOO
; 2435 26 80 90 13 E0 04 90 09 A5 81 F0 05 A9 3C 20 D9 &------------< - OOOOOOOOOOOOOOOO
; 2445 1F 8A 20 D9 1F E6 81 E8 E0 06 90 E4 60 24 7C 50 -- ---------`$|P OOOOOOOOOOOOOOOO
; 2455 CE 68 68 A5 7D 85 89 8D B4 29 20 BD 20 24 8A 70 -hh-}----) - $-p OOOOOOOOOOOOOOOO
; 2465 11 A5 01 30 0A 29 20 F0 09 A5 8A 29 10 D0 03 4C ---0-) ----)---L OOOOOOOOOOOOOOOO
; 2475 17 25 4C EA 20 C9 02 B0 0B 20 6C 3B B0 B1 B2 B3 -%L- ---- l;---- OOOOOOOOOOOODDDD
; 2485 3D 98 00 60 D0 0A 20 6C 3B 5D B4 3E 41 B0 00 60 =--`-- l;]->A--` DDDOOOOOODDDDDDO
; 2495 C9 04 B0 0A 20 6C 3B 5D 54 48 41 B0 00 60 D0 0B ---- l;]THA--`-- OOOOOOODDDDDDOOO
; 24A5 20 6C 3B 45 48 B5 44 3D 98 00 60 C9 06 B0 0A 20  l;EH-D=--`----  OOODDDDDDDOOOOOO
; 24B5 6C 3B AD B6 B7 3D 98 00 60 D0 0A 20 6C 3B 46 A3 l;---=--`-- l;F- OODDDDDDOOOOOODD
; 24C5 B8 00 4C 2B 24 20 6C 3B 5D B9 48 41 B0 00 60 20 --L+$ l;]-HA--`  DDOOOOOODDDDDDOO
; 24D5 C3 23 20 FA 20 4C 51 3B BD 80 25 AA BD 50 27 20 -# - LQ;--%--P'  OOOOOOOOOOOOOOOO
; 24E5 F6 24 BD 7A 27 20 F6 24 BD A4 27 20 F6 24 BD CE -$-z' -$--' -$-- OOOOOOOOOOOOOOOO
; 24F5 27 F0 DB 4C D9 1F A4 89 20 A7 20 A5 7A 85 87 A5 '--L---- - -z--- OOOOOOOOOOOOOOOO
; 2505 7A 29 1F 18 69 02 85 7B A5 7A 4A 4A 4A 4A 4A 85 z)--i--{-zJJJJJ- OOOOOOOOOOOOOOOO
; 2515 7A 60 A5 25 F0 03 20 20 3B A6 89 BD 00 1F AA 20 z`-%--  ;------  OOOOOOOOOOOOOOOO
; 2525 12 0B 20 32 3B 20 C0 1F 20 FB 24 A5 79 29 08 D0 -- 2; -- -$-y)-- OOOOOOOOOOOOOOOO
; 2535 13 20 6C 3B 5D 29 3E 3D 28 00 A4 7B B1 77 20 2D - l;])>=(--{-w - OOOODDDDDDOOOOOO
; 2545 24 20 FA 20 4C 00 00 00 00 00 00 00 00 00 00 00 $ - L----------- OOOOOOOUUUUUUUUU

